h2 Component

p V této části si vytvoříme komponentu, upravíme její šablonu. Vyzkoušíme si šablonové výrazy a pipe. Na závěr doplníme komponentě vstupy a výstupy.

h3 0. Spuštění cli
p Na začátku spustíme angular-cli stack, aby aplikace běžela a průběžně buidlovala změny kódu.

snippet.
  ng serve

p Na adrese
  | &nbsp;
  a(href="http://localhost:4200",target="_blank")
  | můžete vidět úvodní stránku aplikace s textem "TODO: doplnit text".
  | Pojďme se tedy pustit do tvorby vlastní komponenty.


h3 1. vytvoření komponenty
p.
  Pro vytvoření komponenty můžeme použít scaffolding z angular-cli.
  Komponentu SessionDetail ve složce session nagenerujeme příkazem

snippet.
  ng generate component session/sessionDetailCard

  # můžete použít také zkrácenou verzi
  ng g component session/sessionDetailCard

p.
  Ve složce #[b src/session] vznikla podsložka #[b session-detail-card] se čtyřmi soubory - šablonou, styly, testem a kódem.
  Při pohledu do souboru #[b src/session/session-detail-card/session-detail-card.ts] uvidíte následující kód:

snippet.
  TODO: ukázka se selektorem

p.
  Všimněte si vlastnosti #[b selector] v dekorátoru komponenty - to je název html prvku, který bude komponentu reprezentovat.
  Když tedy v #[b src/app/app.component.html] komponentu použijeme, měli bychom po rebuildu vidět v prohlížeči její šablonu.

ul.task
  li použijte komponentu v #b app.component.html]
  li zkontrolujte, že se zobrazuje v prohlížeči

h3 2. data a šablona komponenty

p.
  Šablona může jako data využívat vlastnosti třídy komponenty.
  Pro začátek tedy nastavíme do session komponenty #[b src/session/session-detail-card/session-detail-card.ts] následující data:

snippet.
  session = {
   "id": 400,
   "title": "REST API je mrtvé, ať žije GraphQL",
   "description": "REST se stal standardem pro API. Poslední dobou se ale ukazuje, že není vhodné pro uživatelské rozhraní. Facebook nám nabídl GraphQL a skvělou knihovnu Relay, která usnadňuje a zrychluje práci s daty v aplikacích. ",
   "speakers": [
     {
       "id": 6,
       "featured": false,
       "name": "Petr Ferschmann",
       "company": "puzzlette",
       "country": "Pilsen, Czech Republic",
       "photoUrl": "/images/people/petr_fershmann.jpg",
       "shortBio": "Co-founded and operated cloud based accounting system ABRA @FlexiBee. Loves backend and so he is involved in @fnxio. Now he's starting a new project.",
       "bio": "Co-founded and operated cloud based accounting system ABRA @FlexiBee. Loves backend and so he is involved in @fnxio. Now he's starting a new project.",
       "tags": [
         "Backend",
         "REST API",
         "GraphQL"
       ]
     }
   ],
   "language": "Czech",
   "complexity": "Advanced",
   "tags": [
     "Backend",
     "Web",
     "GraphQL",
     "REST API"
   ]
  }

ul.task
  li v komponentě sessionDetailCard vytvořte vlastnost session s uvedenými daty.

p.
  Tyto data nyní můžeme v šabloně používat.
  Do šablonky si tedy vložíme šablonu připravenou od stylaře TODO soubor, nebo zůstane v indexu?
  a oživíme ji.

ul.task
  li zkopírujte připravenou šablonku do souboru #[b src/session/session-detail-card/session-detail-card.html]
  li oživte v šabloně výpis dat
    ul
      li název přednášky (title)
      li popis přednášky  (description)
      li jazyk a náročnost (language, complexity)
  li zkontrolujte, že se data vypisují správně

hint
  div(ng-non-bindable).
    data v šabloně vypisuje pomocí složených závorek {{value}} a to i pokud jde o objektové vlastnosti {{object.property}}

p.
  U přednášky je dále seznam tagů, ten je nutné vypsat v cyklu

ul.task
  li použijte #[b ngFor] k vypsání tagů

hint.
  <div *ngFor="let item of itemsCollection">

p.
  Poslední informace, která zatím chybí jsou informace o přednášejícím.
  Protože přednášejících může být víc, najdete je v poli #[b speakers]


ul.task
  li použijte #[b ngFor] k vypsání přednášejících //TODO nebo pipe?

h3 3. obsluha událostí
p.
  V pravém horním rohu komponenty najdete odkaz s ikonkou srdíčka. V budoucnu ho budeme používat k označení přednášek,
  které se uživateli líbí. To ale není starostí této komponenty. Ta budou pouze notifikovat nadřazenou komponentu.
  Pojďme si tedy vyzkoušet zpracování událostí.

ul.task
  li Vytvořte ve třídě komponenty #[b class-path] metodu #[b onHeaderClick]. Pro začátek stačí když v ní zalogujete do konzole.
  li použijte metodu #[b onHeaderClick] jako obsluhu události #[b click]  odkazu s ikonou.
  li ověřte, že při kliknutí opravdu dojte k zavolání obslužné metody a výpisu do konzole.

h3 4. @Input a @Output
p.
  Komponenta vypisuje data a obsluhuje událost, všechno si ale řeší uvnitř sebe.
  Nyní bychom ji chtěli definovat vstupní a výstupní vlastnosti, aby ji později bylo možné použít v rámci dalších komponent.

p.
  Data o přednášce by komponenta měla dostávat zvenku.
  Smažeme tedy data uvedená v komponentě a označme vlastnost session jako vstup.
  Data jí pak předáme z nadřazení komponenty #[b app-root] kde jsou připravena ve vlastnosti session.

ul.task
  li definujte vlastnost session jako vstup pomocí dekorátoru @Input
  li v šabloně komponenty #[b app-root] předejte jako hodnotu vlastnos session

p.
  Stejně tak o kliknutí na ikonku srdíčka chceme notifikovat nadřazenou koumponentu

ul.task
  li definujte @Output onFavoriteClick jako EventEmmiter
  li v obsluze kliknutí #[b onHeaderClick] emitujte vlastnost session TODO: nebo session.id?
  li v šabloně komponenty #[b app-root] reagujte na událost #[b onFavoriteClick] voláním připraveného handleru #[b onFavoriteClick]

.success.
  Výborně, právě jste vytvořili samostatnou komponentu, která dostává vstupní data a umožňuje reagovat na události, které v ní nastaly.
  Komponenty jsou základním stavebním prvkem aplikací v Angular 2, v další části se podíváme jak je skládat dohromady a propojit do aplikace.
